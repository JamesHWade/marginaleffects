---
title: Inverse Probability Weighting
---

Inverse Probability Weighting (IPW) is a popular technique to remove confounding in statistical modeling. It essentially involves re-weighting your sample so that it represents the population you're interested in. Typically, we begin by estimating the predicted probability that each unit is treated. Then, we use these probabilities as weights in model fitting and in the computation of marginal effects, contrasts, risk differences, ratios, etc.

To illustrate, we use the Lalonde data.

```{r, include = FALSE}
options(width = 10000)
```

```{r}
library(marginaleffects)
data("lalonde", package = "MatchIt")
head(lalonde)
```

To begin, we use a logistic regression model and the `predictions()` function to estimate the probability that each unit will treated:

```{r}
m <- glm(treat ~ age + educ + race + re74, data = lalonde, family = binomial)
w <- predictions(m)$estimate
```

Then, we use a linear regression to model the outcome variable of interest `re78`. Note that we use the predictions as weights in the model fitting process.

```{r}
dat <- transform(lalonde, wts = w)
mod <- lm(re78 ~ treat * (age + educ + race + re74), data = dat, weights = wts)
```

Finally, we use the `avg_comparisons()` function to compute the average treatment effect on the treated. Note that we use the `weights` argument to specify the weights to be used in the computation.

```{r}
avg_comparisons(mod,
    variables = "treat",
    wts = "wts",
    newdata = subset(dat, treat == 1)
)
```

By default, `avg_comparisons()` uses the Hajek estimator, that is, the weights are normalized to sum to 1 before computation. If a user wants to use the Horvitz-Thompson estimator---where normalization accounts for sample size---they can easily define a custom `comparison` function like this one:

```{r}
ht <- \(hi, lo, w, newdata) {
    (sum(hi * w) / nrow(newdata)) - (sum(lo * w) / nrow(newdata))
}

comparisons(mod,
    comparison = ht,
    variables = "treat",
    wts = "wts",
    newdata = subset(dat, treat == 1)) 
```